swagger: "2.0"
info:
  description: "This is a sample server Kartoffel server."
  version: "0.0.2"
  title: "Kartoffel"
host: "localhost:3000"
basePath: "/api"
tags:
- name: "user"
  description: "Operations about user"
- name: "groups"
  description: "Group stuff"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "This could be done with permissions only"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
        405:
          description: "Invalid Input"
  /user/getAll:
    get:
      tags: 
      - "user"
      summary: "Get all the Users "
      description: ""
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /user/{userID}:
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      description: ""
      operationId: "getUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "The ID of the user. Use '1234567' for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
# securityDefinitions:
#   petstore_auth:
#     type: "oauth2"
#     authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#     flow: "implicit"
#     scopes:
#       write:pets: "modify pets in your account"
#       read:pets: "read your pets"
#   api_key:
#     type: "apiKey"
#     name: "api_key"
#     in: "header"
definitions:
  User:
    type: "object"
    required:
    - "_id"
    - "firstName"
    - "lastName"
    properties:
      _id:
        type: "string"
        example: "1234567"
      firstName:
        type: "string"
        example: "Avi"
      lastName:
        type: "string"
        example: "Ron"
      email:
        type: "string"
        example: "iam@work.com"
      phone:
        type: "string"
        example: "056-874-2563"
      job:
        type: "string"
        example: "Programmer"
      rank:
        type: "string"
        example: "Experienced"
      adress:
        type: "string"
        example: "10 Downing Street, England"
      isSecurityOfficer:
        type: "boolean"
        default: false
      clearance:
        type: "number"
        example: 0
    xml:
      name: "User"