swagger: "2.0"
info:
  description: "This is a sample server Kartoffel server."
  version: "0.2.2"
  title: "Kartoffel"
basePath: "/api"
tags:
- name: "user"
  description: "Operations about user"
- name: "groups"
  description: "Group stuff"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: "This could be done with permissions only"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
        405:
          description: "Invalid Input"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
  /user/getAll:
    get:
      tags: 
      - "user"
      summary: "Get all the Users "
      description: ""
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /user/getUpdated/{from}:
    get:
      tags: 
      - "user"
      summary: "Returns users updated from a given date"
      description: ""
      operationId: "getUpdatedUsers"
      produces:
      - "application/json"
      parameters:
      - name: "from"
        in: "path"
        description: "The date from which you want to get the updated objects"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Did not recive a valid date ;)"
  /user/{userID}:
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      description: ""
      operationId: "getUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "The ID of the user. Use '1234567' for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /user/{userID}/personal:
    put:
      tags:
      - "user"
      summary: "Update user's personal info by his ID"
      description: "Updates only the folowing fields: job, mail, phone, address"
      operationId: "updateUserPersonal"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
  /user/{userID}/assign:
    put:
      tags:
      - "user"
      summary: "Assign user to a group"
      description: "Advanced permissions needed"
      operationId: "assignUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            group:
              type: "string"
      responses:
        200:
          description: "successful operation"
        404:
          description: "request error"
  /user/{userID}/dismiss:
    put:
      tags:
      - "user"
      summary: "Dissmis a user from his current group"
      description: "Advanced permissions needed"
      operationId: "dismissUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        404:
          description: "request error"
  /user/{userID}/manage:
    put:
      tags:
      - "user"
      summary: "Appoint a user to manage a group"
      description: "Advanced permissions needed. A user can be a manager of only one Kartoffel, and he should be a member of that one as well."
      operationId: "promoteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            group:
              type: "string"
      responses:
        200:
          description: "successful operation"
        404:
          description: "request error"
  /user/{userID}/resign:
    put:
      tags:
      - "user"
      summary: "Discharge a user from management of a group"
      description: "Advanced permissions needed"
      operationId: "resignUser"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        404:
          description: "request error"
  /kartoffel:
    get:
      tags: 
      - "kartoffel"
      summary: "Get all the Strong Groups "
      description: ""
      operationId: "getAllKartoffeln"
      parameters:
        - in: query
          name: name
          type: string
          description: The name of the group
        - in: query
          name: type
          type: string
          description: The type of the group
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Kartoffel"
    post:
      tags:
      - "kartoffel"
      summary: "Create a new strong group"
      description: "This could be done with permissions only"
      operationId: "createKartoffel"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created strong group object"
        required: true
        schema:
          $ref: "#/definitions/Kartoffel"
      responses:
        200:
          description: "successful operation"
        405:
          description: "Invalid Input"
  /kartoffel/{id}:
    get:      
      tags:
      - "kartoffel"
      summary: "Get kartoffel by ID"
      description: ""
      operationId: "getKartoffelByID"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The ID of the user."
        required: true
        type: "string"
      - in: query
        name: populate
        type: string
        description: A list of fields to populate
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "kartoffel"
      summary: "Delete kartoffel"
      description: "Advanced permissions needed"
      operationId: "deleteKartoffel"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
  /kartoffel/adoption:
    put:
      tags:
      - "kartoffel"
      summary: "Move group A under group B"
      description: "Advanced permissions needed. Changes the hierarchy tree"
      operationId: "adoptKartoffel"
      produces:
      - "application/json"
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            childID:
              type: "string"
            parentID:
              type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "request error"
# securityDefinitions:
#   petstore_auth:
#     type: "oauth2"
#     authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#     flow: "implicit"
#     scopes:
#       write:pets: "modify pets in your account"
#       read:pets: "read your pets"
#   api_key:
#     type: "apiKey"
#     name: "api_key"
#     in: "header"
definitions:
  # userID:
  #   type: "string"
  #   required: "true"
  #   example: "1234567"
  # groupID:
  #   type: "string"
  #   required: "true"
  #   example: "59a56d577bedba18504298df"
  Kartoffel:
    type: "object"
    required:
    - "name"
    properties:
      _id:
        type: "string"
        example: "59a56d577bedba18504298df"
      name:
        type: "string"
        example: "Koktamovim"
      admins:
        type: "array"
        example: []
        items:
          type: "string"
      members:
        type: "array"
        example: []
        items:
          type: "string"
      children:
        type: "array"
        example: []
        items:
          type: "string"
      clearance:
        type: "number"
        example: 0
      ancestors:
        type: "array"
        example: []
        items:
          type: "string"
      type:
        type: "string"
        example: "Team"
    xml:
      name: "Kartoffel"
  User:
    type: "object"
    required:
    - "_id"
    - "firstName"
    - "lastName"
    properties:
      _id:
        type: "string"
        example: "1234567"
      firstName:
        type: "string"
        example: "Avi"
      lastName:
        type: "string"
        example: "Ron"
      email:
        type: "string"
        example: "iam@work.com"
      phone:
        type: "string"
        example: "056-874-2563"
      job:
        type: "string"
        example: "Programmer"
      rank:
        type: "string"
        example: "Experienced"
      adress:
        type: "string"
        example: "10 Downing Street, England"
      isSecurityOfficer:
        type: "boolean"
        default: false
      clearance:
        type: "number"
        example: 0
    xml:
      name: "User"